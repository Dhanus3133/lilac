[Running 'cargo run']
  [2m2025-06-08T03:25:16.084095Z[0m [32m INFO[0m [1;32mcontrolplane_api[0m[32m: [32mdatabase url: postgres://postgres:12345@localhost/database[0m
    [2;3mat[0m controlplane-api/src/main.rs:30

  [2m2025-06-08T03:25:16.160005Z[0m [32m INFO[0m [1;32msqlx::postgres::notice[0m[32m: [32mrelation "_sqlx_migrations" already exists, skipping[0m
    [2;3mat[0m /Users/ryan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-postgres-0.8.6/src/connection/stream.rs:185

  [2m2025-06-08T03:25:16.353841Z[0m [32m INFO[0m [1;32mcontrolplane_api[0m[32m: [32mlistening on 0.0.0.0:3000[0m
    [2;3mat[0m controlplane-api/src/main.rs:66

  [2m2025-06-08T03:25:18.483494Z[0m [32m INFO[0m [1;32mcontrolplane_api::routes::user::user[0m[32m: [1;32mreturn[0m[32m: Json(GetUserResponse { id: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), email: "ewingryan98@gmail.com" })[0m
    [2;3mat[0m controlplane-api/src/routes/user/user.rs:44
    [2;3min[0m controlplane_api::routes::user::user::[1mget_current_user[0m [2;3mwith[0m [1mclaims[0m: Claims { exp: 1749373669, iat: 1749352069, sub: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), jti: "ce5b486f-11b8-470d-a3b7-506e239750d9" }
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: aaf31d1b-a9b9-4a49-8464-46479be43b99

  [2m2025-06-08T03:25:18.507735Z[0m [32m INFO[0m [1;32mcontrolplane_api::routes::user::user[0m[32m: [1;32mreturn[0m[32m: Json(GetUserResponse { id: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), email: "ewingryan98@gmail.com" })[0m
    [2;3mat[0m controlplane-api/src/routes/user/user.rs:44
    [2;3min[0m controlplane_api::routes::user::user::[1mget_current_user[0m [2;3mwith[0m [1mclaims[0m: Claims { exp: 1749373669, iat: 1749352069, sub: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), jti: "ce5b486f-11b8-470d-a3b7-506e239750d9" }
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: 5d5d53c8-564b-46c0-8c31-0ae9d6253783

  [2m2025-06-08T03:25:18.609864Z[0m [32m INFO[0m [1;32mcontrolplane_api::routes::projects::projects[0m[32m: [1;32mreturn[0m[32m: Json(GetProjectResponse { id: ProjectId(87843f12-1c28-4f8c-a294-ba738c159264), name: "project1", organization_id: OrganizationId(fba78657-e32c-4f2d-afa6-cc28defed948), aws_integration: Some(AWSIntegration { role_arn: "arn:aws:iam::855326892052:role/LilacAccessRole", external_id: "Lilac-b1538a2be7b949a2b59e81308e479b95" }) })[0m
    [2;3mat[0m controlplane-api/src/routes/projects/projects.rs:47
    [2;3min[0m controlplane_api::routes::projects::projects::[1mget_project[0m [2;3mwith[0m [1mclaims[0m: Claims { exp: 1749373669, iat: 1749352069, sub: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), jti: "ce5b486f-11b8-470d-a3b7-506e239750d9" }, [1mproject_id[0m: "87843f12-1c28-4f8c-a294-ba738c159264"
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: 18eb7895-9c6c-4c74-a333-87e6a40ab5f9

  [2m2025-06-08T03:25:18.619489Z[0m [32m INFO[0m [1;32mcontrolplane_api::routes::organization::organization[0m[32m: [1;32mreturn[0m[32m: Json(ListOrganizationsResponse { organizations: [GetOrganizationResponse { id: OrganizationId(fba78657-e32c-4f2d-afa6-cc28defed948), name: "test org" }] })[0m
    [2;3mat[0m controlplane-api/src/routes/organization/organization.rs:70
    [2;3min[0m controlplane_api::routes::organization::organization::[1mlist_organizations[0m [2;3mwith[0m [1mclaims[0m: Claims { exp: 1749373669, iat: 1749352069, sub: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), jti: "ce5b486f-11b8-470d-a3b7-506e239750d9" }
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: f5d758bb-6bd8-4423-9ce7-893aea229fe5

  [2m2025-06-08T03:25:18.814593Z[0m [32m INFO[0m [1;32mcontrolplane_api::routes::datasets::datasets[0m[32m: [1;32mreturn[0m[32m: Json(GetDatasetResponse { id: DatasetId(2f6992ce-fe32-45c6-8e28-07ceb3de3aef), name: "my-bucket", description: Some(""), project_id: ProjectId(87843f12-1c28-4f8c-a294-ba738c159264), dataset_source: S3 { bucket_name: "855326892052-test-data-project-assets", region: "us-west-2" } })[0m
    [2;3mat[0m controlplane-api/src/routes/datasets/datasets.rs:102
    [2;3min[0m controlplane_api::routes::datasets::datasets::[1mget_dataset[0m [2;3mwith[0m [1mdataset_id[0m: DatasetId(2f6992ce-fe32-45c6-8e28-07ceb3de3aef)
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: f2817ff4-5000-4a2e-b615-eeb55e743a6c

  [2m2025-06-08T03:25:19.016187Z[0m [32m INFO[0m [1;32mcommon::aws::s3[0m[32m: [32mListObjectsV2Output { is_truncated: Some(false), contents: None, name: Some("855326892052-test-data-project-assets"), prefix: Some(""), delimiter: Some("/"), max_keys: Some(1000), common_prefixes: Some([CommonPrefix { prefix: Some("customer_assets/") }]), encoding_type: None, key_count: Some(1), continuation_token: None, next_continuation_token: None, start_after: None, request_charged: None, _extended_request_id: Some("OWzw+3alfcN8NurakZaWQWdb1vLAsV4OQoZFHNDlO3CW491Dl7PH28RNNnZihpQRPVD0yKiIBUk="), _request_id: Some("A82CPW80F4XP1NF7") }[0m
    [2;3mat[0m common/src/aws/s3.rs:145
    [2;3min[0m common::aws::s3::[1mlist_dataset_prefixes[0m [2;3mwith[0m [1mself[0m: S3Wrapper { bucket: "855326892052-test-data-project-assets", client: Client { handle: Handle { conf: Config { config: FrozenLayer(Layer { name: "aws_sdk_s3::config::Config", items: [TypeErasedBox[Clone]:Set(AppName("lilac")), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "s3", version: "1.90.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("s3")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_sdk_s3::config::DisableS3ExpressSessionAuth"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips"), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2"))] }), cloneable: CloneableLayer(Layer { name: "", items: [TypeErasedBox[Clone]:Set(AppName("lilac")), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "s3", version: "1.90.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("s3")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_sdk_s3::config::DisableS3ExpressSessionAuth"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips"), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2"))] }), runtime_components: RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(LazyCache { partitions: CachePartitions { partitions: RwLock { data: {}, poisoned: false, .. }, buffer_time: 10s }, load_timeout: 5s, buffer_time: 10s, buffer_time_jitter_fraction: 0x103d19638, default_expiration: 900s }) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4a" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(5)), cache_partition: IdentityCachePartition(5) } }, AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(5)), cache_partition: IdentityCachePartition(5) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }, runtime_plugins: [], behavior_version: Some(BehaviorVersion(V2025_01_17)) }, runtime_plugins: RuntimePlugins { client_plugins: [SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_http_client_plugin", auth_scheme_option_resolver: None, http_client: Some(Tracked { _origin: "default_http_client_plugin", value: SharedHttpClient { selector: HyperClient { connector_cache: RwLock { data: {}, poisoned: false, .. }, client_builder: Builder { client_config: Config { retry_canceled_requests: true, set_host: true, ver: Auto }, pool_config: Config { idle_timeout: Some(90s), max_idle_per_host: 18446744073709551615 } } } } }), endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_identity_cache_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "default_identity_cache_plugin", value: SharedIdentityCache(LazyCache { partitions: CachePartitions { partitions: RwLock { data: {}, poisoned: false, .. }, buffer_time: 10s }, load_timeout: 5s, buffer_time: 10s, buffer_time_jitter_fraction: 0x103d19638, default_expiration: 900s }) }), identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_retry_config", items: [TypeErasedBox[!Clone]:Set(RetryConfig { mode: Standard, max_attempts: 1, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[!Clone]:Set(RetryPartition { name: "s3-us-west-2" })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_retry_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "default_retry_config_plugin", value: SharedInterceptor { interceptor: TokenBucketProvider { default_partition: RetryPartition { name: "s3-us-west-2" }, token_bucket: TokenBucket { semaphore: Semaphore { ll_sem: Semaphore { permits: 500 } }, max_permits: 500, timeout_retry_cost: 10, retry_cost: 5 } } } }], retry_classifiers: [], retry_strategy: Some(Tracked { _origin: "default_retry_config_plugin", value: SharedRetryStrategy(StandardRetryStrategy { retry_permit: Mutex { data: None, poisoned: false, .. } }) }), time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_retry_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_sleep_impl_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: Some(Tracked { _origin: "default_sleep_impl_plugin", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_time_source_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "default_time_source_plugin", value: SharedTimeSource(SystemTimeSource) }), sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_timeout_config", items: [TypeErasedBox[!Clone]:Set(TimeoutConfig { connect_timeout: Disabled, read_timeout: Disabled, operation_timeout: Disabled, operation_attempt_timeout: Disabled })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_timeout_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_timeout_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_stalled_stream_protection_config", items: [TypeErasedBox[!Clone]:Set(StalledStreamProtectionConfig { upload_enabled: true, download_enabled: true, grace_period: 5s })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_stalled_stream_protection_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_stalled_stream_protection_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(ServiceRuntimePlugin { config: Some(FrozenLayer(Layer { name: "AmazonS3", items: [TypeErasedBox[!Clone]:Set(AuthSchemeAndEndpointOrchestrationV2)] })), runtime_components: RuntimeComponentsBuilder { builder_name: "ServiceRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: Some(Tracked { _origin: "ServiceRuntimePlugin", value: SharedEndpointResolver(DowncastParams(DefaultResolver { partition_resolver: PartitionResolver { partitions: [PartitionMetadata { id: "aws", region_regex: Regex("^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$"), regions: {"ap-southeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "sa-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "mx-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-4": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-7": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "af-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-5": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "il-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-east-1" } }, PartitionMetadata { id: "aws-cn", region_regex: Regex("^cn\\-\\w+\\-\\d+$"), regions: {"aws-cn-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "cn-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "cn-northwest-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-cn", dns_suffix: "amazonaws.com.cn", dual_stack_dns_suffix: "api.amazonwebservices.com.cn", supports_fips: true, supports_dual_stack: true, implicit_global_region: "cn-northwest-1" } }, PartitionMetadata { id: "aws-us-gov", region_regex: Regex("^us\\-gov\\-\\w+\\-\\d+$"), regions: {"us-gov-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-gov-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-us-gov-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-us-gov", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-gov-west-1" } }, PartitionMetadata { id: "aws-iso", region_regex: Regex("^us\\-iso\\-\\w+\\-\\d+$"), regions: {"us-iso-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-iso-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-iso-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso", dns_suffix: "c2s.ic.gov", dual_stack_dns_suffix: "c2s.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-iso-east-1" } }, PartitionMetadata { id: "aws-iso-b", region_regex: Regex("^us\\-isob\\-\\w+\\-\\d+$"), regions: {"aws-iso-b-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isob-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-b", dns_suffix: "sc2s.sgov.gov", dual_stack_dns_suffix: "sc2s.sgov.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isob-east-1" } }, PartitionMetadata { id: "aws-iso-e", region_regex: Regex("^eu\\-isoe\\-\\w+\\-\\d+$"), regions: {"aws-iso-e-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-isoe-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-e", dns_suffix: "cloud.adc-e.uk", dual_stack_dns_suffix: "cloud.adc-e.uk", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eu-isoe-west-1" } }, PartitionMetadata { id: "aws-iso-f", region_regex: Regex("^us\\-isof\\-\\w+\\-\\d+$"), regions: {"aws-iso-f-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-f", dns_suffix: "csp.hci.ic.gov", dual_stack_dns_suffix: "csp.hci.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isof-south-1" } }, PartitionMetadata { id: "aws-eusc", region_regex: Regex("^eusc\\-(de)\\-\\w+\\-\\d+$"), regions: {"eusc-de-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-eusc", dns_suffix: "amazonaws.eu", dual_stack_dns_suffix: "amazonaws.eu", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eusc-de-east-1" } }] } })) }), auth_schemes: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(SigV4AuthScheme { signer: SigV4Signer }) }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(SigV4aAuthScheme { signer: SigV4aSigner }) }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(S3ExpressAuthScheme { signer: SigV4Signer }) }], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ConnectionPoisoningInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RetryModeFeatureTrackerInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ServiceClockSkewInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RequestInfoInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: UserAgentInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: InvocationIdInterceptor { default: DefaultInvocationIdGenerator { rng: Mutex { data: Rng(3717967720444552898), poisoned: false, .. } } } } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RecursionDetectionInterceptor { env: Env(Real) } } }], retry_classifiers: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedRetryClassifier(HttpStatusCodeClassifier { retryable_status_codes: [500, 502, 503, 504] }) }], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] } }), SharedRuntimePlugin(EnforceContentLengthRuntimePlugin), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "aws_sdk_s3::config::Config", items: [TypeErasedBox[Clone]:Set(AppName("lilac")), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "s3", version: "1.90.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("s3")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_sdk_s3::config::DisableS3ExpressSessionAuth"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips"), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2"))] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(LazyCache { partitions: CachePartitions { partitions: RwLock { data: {}, poisoned: false, .. }, buffer_time: 10s }, load_timeout: 5s, buffer_time: 10s, buffer_time_jitter_fraction: 0x103d19638, default_expiration: 900s }) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4a" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(5)), cache_partition: IdentityCachePartition(5) } }, AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(5)), cache_partition: IdentityCachePartition(5) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: None }), SharedRuntimePlugin(NoAuthRuntimePlugin(RuntimeComponentsBuilder { builder_name: "NoAuthRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [Tracked { _origin: "NoAuthRuntimePlugin", value: SharedAuthScheme(NoAuthScheme { signer: NoAuthSigner }) }], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "no_auth" }: Tracked { _origin: "NoAuthRuntimePlugin", value: SharedIdentityResolver { inner: NoAuthIdentityResolver, cache_partition: IdentityCachePartition(7) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] })), SharedRuntimePlugin(MetricsRuntimePlugin { scope: "aws-sdk-s3", time_source: SharedTimeSource(SharedTimeSource(SharedTimeSource(SystemTimeSource))), metadata: None }), SharedRuntimePlugin(S3ExpressRuntimePlugin { config: FrozenLayer(Layer { name: "S3ExpressRuntimePlugin", items: [TypeErasedBox[!Clone]:Set(SessionTokenNameOverride)] }), runtime_components_builder: RuntimeComponentsBuilder { builder_name: "S3ExpressRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4-s3express" }: Tracked { _origin: "S3ExpressRuntimePlugin", value: SharedIdentityResolver { inner: DefaultS3ExpressIdentityProvider { behavior_version: BehaviorVersion(V2025_01_17), cache: S3ExpressIdentityCache { time_source: SharedTimeSource(SharedTimeSource(SystemTimeSource)), buffer_time: 10s }, with size/capacity: 0/100 }, cache_partition: IdentityCachePartition(8) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] } })], operation_plugins: [] } } } }, [1mclient[0m: Some(Client { handle: Handle { conf: Config { config: FrozenLayer(Layer { name: "aws_sdk_s3::config::Config", items: [TypeErasedBox[Clone]:Set(AppName("Lilac")), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "s3", version: "1.90.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("s3")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_sdk_s3::config::DisableS3ExpressSessionAuth"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_smithy_types::checksum_config::RequestChecksumCalculation"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_smithy_types::checksum_config::ResponseChecksumValidation"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] }), cloneable: CloneableLayer(Layer { name: "", items: [TypeErasedBox[Clone]:Set(AppName("Lilac")), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "s3", version: "1.90.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("s3")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_sdk_s3::config::DisableS3ExpressSessionAuth"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_smithy_types::checksum_config::RequestChecksumCalculation"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_smithy_types::checksum_config::ResponseChecksumValidation"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] }), runtime_components: RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(AssumeRoleProvider { inner: Inner { fluent_builder: AssumeRoleFluentBuilder { handle: Handle { conf: Config { config: FrozenLayer(Layer { name: "aws_sdk_sts::config::Config", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] }), cloneable: CloneableLayer(Layer { name: "", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] }), runtime_components: RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(NoCache) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(24)), cache_partition: IdentityCachePartition(24) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }, runtime_plugins: [], behavior_version: Some(BehaviorVersion(V2025_01_17)) }, runtime_plugins: RuntimePlugins { client_plugins: [SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_http_client_plugin", auth_scheme_option_resolver: None, http_client: Some(Tracked { _origin: "default_http_client_plugin", value: SharedHttpClient { selector: HyperClient { connector_cache: RwLock { data: {}, poisoned: false, .. }, client_builder: Builder { client_config: Config { retry_canceled_requests: true, set_host: true, ver: Auto }, pool_config: Config { idle_timeout: Some(90s), max_idle_per_host: 18446744073709551615 } } } } }), endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_identity_cache_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "default_identity_cache_plugin", value: SharedIdentityCache(LazyCache { partitions: CachePartitions { partitions: RwLock { data: {}, poisoned: false, .. }, buffer_time: 10s }, load_timeout: 5s, buffer_time: 10s, buffer_time_jitter_fraction: 0x103d19638, default_expiration: 900s }) }), identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_retry_config", items: [TypeErasedBox[!Clone]:Set(RetryConfig { mode: Standard, max_attempts: 1, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[!Clone]:Set(RetryPartition { name: "sts-us-west-2" })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_retry_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "default_retry_config_plugin", value: SharedInterceptor { interceptor: TokenBucketProvider { default_partition: RetryPartition { name: "sts-us-west-2" }, token_bucket: TokenBucket { semaphore: Semaphore { ll_sem: Semaphore { permits: 500 } }, max_permits: 500, timeout_retry_cost: 10, retry_cost: 5 } } } }], retry_classifiers: [], retry_strategy: Some(Tracked { _origin: "default_retry_config_plugin", value: SharedRetryStrategy(StandardRetryStrategy { retry_permit: Mutex { data: None, poisoned: false, .. } }) }), time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_retry_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_sleep_impl_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: Some(Tracked { _origin: "default_sleep_impl_plugin", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_time_source_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "default_time_source_plugin", value: SharedTimeSource(SystemTimeSource) }), sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_timeout_config", items: [TypeErasedBox[!Clone]:Set(TimeoutConfig { connect_timeout: Disabled, read_timeout: Disabled, operation_timeout: Disabled, operation_attempt_timeout: Disabled })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_timeout_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_timeout_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_stalled_stream_protection_config", items: [TypeErasedBox[!Clone]:Set(StalledStreamProtectionConfig { upload_enabled: true, download_enabled: true, grace_period: 5s })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_stalled_stream_protection_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_stalled_stream_protection_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(ServiceRuntimePlugin { config: Some(FrozenLayer(Layer { name: "AWSSecurityTokenServiceV20110615", items: [TypeErasedBox[!Clone]:Set(AuthSchemeAndEndpointOrchestrationV2)] })), runtime_components: RuntimeComponentsBuilder { builder_name: "ServiceRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: Some(Tracked { _origin: "ServiceRuntimePlugin", value: SharedEndpointResolver(DowncastParams(DefaultResolver { partition_resolver: PartitionResolver { partitions: [PartitionMetadata { id: "aws", region_regex: Regex("^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$"), regions: {"aws-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-5": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-4": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "mx-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "il-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "af-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-7": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "sa-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-east-1" } }, PartitionMetadata { id: "aws-cn", region_regex: Regex("^cn\\-\\w+\\-\\d+$"), regions: {"cn-northwest-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "cn-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-cn-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-cn", dns_suffix: "amazonaws.com.cn", dual_stack_dns_suffix: "api.amazonwebservices.com.cn", supports_fips: true, supports_dual_stack: true, implicit_global_region: "cn-northwest-1" } }, PartitionMetadata { id: "aws-us-gov", region_regex: Regex("^us\\-gov\\-\\w+\\-\\d+$"), regions: {"aws-us-gov-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-gov-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-gov-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-us-gov", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-gov-west-1" } }, PartitionMetadata { id: "aws-iso", region_regex: Regex("^us\\-iso\\-\\w+\\-\\d+$"), regions: {"aws-iso-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-iso-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-iso-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso", dns_suffix: "c2s.ic.gov", dual_stack_dns_suffix: "c2s.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-iso-east-1" } }, PartitionMetadata { id: "aws-iso-b", region_regex: Regex("^us\\-isob\\-\\w+\\-\\d+$"), regions: {"aws-iso-b-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isob-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-b", dns_suffix: "sc2s.sgov.gov", dual_stack_dns_suffix: "sc2s.sgov.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isob-east-1" } }, PartitionMetadata { id: "aws-iso-e", region_regex: Regex("^eu\\-isoe\\-\\w+\\-\\d+$"), regions: {"eu-isoe-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-iso-e-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-e", dns_suffix: "cloud.adc-e.uk", dual_stack_dns_suffix: "cloud.adc-e.uk", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eu-isoe-west-1" } }, PartitionMetadata { id: "aws-iso-f", region_regex: Regex("^us\\-isof\\-\\w+\\-\\d+$"), regions: {"aws-iso-f-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-f", dns_suffix: "csp.hci.ic.gov", dual_stack_dns_suffix: "csp.hci.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isof-south-1" } }, PartitionMetadata { id: "aws-eusc", region_regex: Regex("^eusc\\-(de)\\-\\w+\\-\\d+$"), regions: {"eusc-de-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-eusc", dns_suffix: "amazonaws.eu", dual_stack_dns_suffix: "amazonaws.eu", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eusc-de-east-1" } }] } })) }), auth_schemes: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(SigV4AuthScheme { signer: SigV4Signer }) }], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ConnectionPoisoningInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RetryModeFeatureTrackerInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ServiceClockSkewInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RequestInfoInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: UserAgentInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: InvocationIdInterceptor { default: DefaultInvocationIdGenerator { rng: Mutex { data: Rng(5967943325457935553), poisoned: false, .. } } } } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RecursionDetectionInterceptor { env: Env(Real) } } }], retry_classifiers: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedRetryClassifier(HttpStatusCodeClassifier { retryable_status_codes: [500, 502, 503, 504] }) }], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] } }), SharedRuntimePlugin(EnforceContentLengthRuntimePlugin), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "aws_sdk_sts::config::Config", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(NoCache) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(24)), cache_partition: IdentityCachePartition(24) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: None }), SharedRuntimePlugin(NoAuthRuntimePlugin(RuntimeComponentsBuilder { builder_name: "NoAuthRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [Tracked { _origin: "NoAuthRuntimePlugin", value: SharedAuthScheme(NoAuthScheme { signer: NoAuthSigner }) }], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "no_auth" }: Tracked { _origin: "NoAuthRuntimePlugin", value: SharedIdentityResolver { inner: NoAuthIdentityResolver, cache_partition: IdentityCachePartition(26) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] })), SharedRuntimePlugin(MetricsRuntimePlugin { scope: "aws-sdk-sts", time_source: SharedTimeSource(SharedTimeSource(SharedTimeSource(SystemTimeSource))), metadata: None })], operation_plugins: [] } }, inner: AssumeRoleInputBuilder { role_arn: Some("arn:aws:iam::855326892052:role/LilacAccessRole"), role_session_name: Some("Lilac"), policy_arns: None, policy: None, duration_seconds: None, tags: None, transitive_tag_keys: None, external_id: Some("Lilac-b1538a2be7b949a2b59e81308e479b95"), serial_number: None, token_code: None, source_identity: None, provided_contexts: None }, config_override: None } } }, IdentityCachePartition(27)), cache_partition: IdentityCachePartition(27) } }, AuthSchemeId { scheme_id: "sigv4a" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(AssumeRoleProvider { inner: Inner { fluent_builder: AssumeRoleFluentBuilder { handle: Handle { conf: Config { config: FrozenLayer(Layer { name: "aws_sdk_sts::config::Config", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] }), cloneable: CloneableLayer(Layer { name: "", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] }), runtime_components: RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(NoCache) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(24)), cache_partition: IdentityCachePartition(24) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }, runtime_plugins: [], behavior_version: Some(BehaviorVersion(V2025_01_17)) }, runtime_plugins: RuntimePlugins { client_plugins: [SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_http_client_plugin", auth_scheme_option_resolver: None, http_client: Some(Tracked { _origin: "default_http_client_plugin", value: SharedHttpClient { selector: HyperClient { connector_cache: RwLock { data: {}, poisoned: false, .. }, client_builder: Builder { client_config: Config { retry_canceled_requests: true, set_host: true, ver: Auto }, pool_config: Config { idle_timeout: Some(90s), max_idle_per_host: 18446744073709551615 } } } } }), endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_identity_cache_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "default_identity_cache_plugin", value: SharedIdentityCache(LazyCache { partitions: CachePartitions { partitions: RwLock { data: {}, poisoned: false, .. }, buffer_time: 10s }, load_timeout: 5s, buffer_time: 10s, buffer_time_jitter_fraction: 0x103d19638, default_expiration: 900s }) }), identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_retry_config", items: [TypeErasedBox[!Clone]:Set(RetryConfig { mode: Standard, max_attempts: 1, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[!Clone]:Set(RetryPartition { name: "sts-us-west-2" })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_retry_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "default_retry_config_plugin", value: SharedInterceptor { interceptor: TokenBucketProvider { default_partition: RetryPartition { name: "sts-us-west-2" }, token_bucket: TokenBucket { semaphore: Semaphore { ll_sem: Semaphore { permits: 500 } }, max_permits: 500, timeout_retry_cost: 10, retry_cost: 5 } } } }], retry_classifiers: [], retry_strategy: Some(Tracked { _origin: "default_retry_config_plugin", value: SharedRetryStrategy(StandardRetryStrategy { retry_permit: Mutex { data: None, poisoned: false, .. } }) }), time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_retry_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_sleep_impl_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: Some(Tracked { _origin: "default_sleep_impl_plugin", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_time_source_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "default_time_source_plugin", value: SharedTimeSource(SystemTimeSource) }), sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_timeout_config", items: [TypeErasedBox[!Clone]:Set(TimeoutConfig { connect_timeout: Disabled, read_timeout: Disabled, operation_timeout: Disabled, operation_attempt_timeout: Disabled })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_timeout_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_timeout_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_stalled_stream_protection_config", items: [TypeErasedBox[!Clone]:Set(StalledStreamProtectionConfig { upload_enabled: true, download_enabled: true, grace_period: 5s })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_stalled_stream_protection_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_stalled_stream_protection_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(ServiceRuntimePlugin { config: Some(FrozenLayer(Layer { name: "AWSSecurityTokenServiceV20110615", items: [TypeErasedBox[!Clone]:Set(AuthSchemeAndEndpointOrchestrationV2)] })), runtime_components: RuntimeComponentsBuilder { builder_name: "ServiceRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: Some(Tracked { _origin: "ServiceRuntimePlugin", value: SharedEndpointResolver(DowncastParams(DefaultResolver { partition_resolver: PartitionResolver { partitions: [PartitionMetadata { id: "aws", region_regex: Regex("^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$"), regions: {"aws-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-5": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-4": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "mx-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "il-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "af-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-7": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "sa-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-east-1" } }, PartitionMetadata { id: "aws-cn", region_regex: Regex("^cn\\-\\w+\\-\\d+$"), regions: {"cn-northwest-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "cn-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-cn-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-cn", dns_suffix: "amazonaws.com.cn", dual_stack_dns_suffix: "api.amazonwebservices.com.cn", supports_fips: true, supports_dual_stack: true, implicit_global_region: "cn-northwest-1" } }, PartitionMetadata { id: "aws-us-gov", region_regex: Regex("^us\\-gov\\-\\w+\\-\\d+$"), regions: {"aws-us-gov-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-gov-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-gov-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-us-gov", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-gov-west-1" } }, PartitionMetadata { id: "aws-iso", region_regex: Regex("^us\\-iso\\-\\w+\\-\\d+$"), regions: {"aws-iso-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-iso-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-iso-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso", dns_suffix: "c2s.ic.gov", dual_stack_dns_suffix: "c2s.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-iso-east-1" } }, PartitionMetadata { id: "aws-iso-b", region_regex: Regex("^us\\-isob\\-\\w+\\-\\d+$"), regions: {"aws-iso-b-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isob-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-b", dns_suffix: "sc2s.sgov.gov", dual_stack_dns_suffix: "sc2s.sgov.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isob-east-1" } }, PartitionMetadata { id: "aws-iso-e", region_regex: Regex("^eu\\-isoe\\-\\w+\\-\\d+$"), regions: {"eu-isoe-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-iso-e-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-e", dns_suffix: "cloud.adc-e.uk", dual_stack_dns_suffix: "cloud.adc-e.uk", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eu-isoe-west-1" } }, PartitionMetadata { id: "aws-iso-f", region_regex: Regex("^us\\-isof\\-\\w+\\-\\d+$"), regions: {"aws-iso-f-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-f", dns_suffix: "csp.hci.ic.gov", dual_stack_dns_suffix: "csp.hci.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isof-south-1" } }, PartitionMetadata { id: "aws-eusc", region_regex: Regex("^eusc\\-(de)\\-\\w+\\-\\d+$"), regions: {"eusc-de-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-eusc", dns_suffix: "amazonaws.eu", dual_stack_dns_suffix: "amazonaws.eu", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eusc-de-east-1" } }] } })) }), auth_schemes: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(SigV4AuthScheme { signer: SigV4Signer }) }], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ConnectionPoisoningInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RetryModeFeatureTrackerInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ServiceClockSkewInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RequestInfoInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: UserAgentInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: InvocationIdInterceptor { default: DefaultInvocationIdGenerator { rng: Mutex { data: Rng(5967943325457935553), poisoned: false, .. } } } } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RecursionDetectionInterceptor { env: Env(Real) } } }], retry_classifiers: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedRetryClassifier(HttpStatusCodeClassifier { retryable_status_codes: [500, 502, 503, 504] }) }], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] } }), SharedRuntimePlugin(EnforceContentLengthRuntimePlugin), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "aws_sdk_sts::config::Config", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(NoCache) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(24)), cache_partition: IdentityCachePartition(24) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: None }), SharedRuntimePlugin(NoAuthRuntimePlugin(RuntimeComponentsBuilder { builder_name: "NoAuthRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [Tracked { _origin: "NoAuthRuntimePlugin", value: SharedAuthScheme(NoAuthScheme { signer: NoAuthSigner }) }], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "no_auth" }: Tracked { _origin: "NoAuthRuntimePlugin", value: SharedIdentityResolver { inner: NoAuthIdentityResolver, cache_partition: IdentityCachePartition(26) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] })), SharedRuntimePlugin(MetricsRuntimePlugin { scope: "aws-sdk-sts", time_source: SharedTimeSource(SharedTimeSource(SharedTimeSource(SystemTimeSource))), metadata: None })], operation_plugins: [] } }, inner: AssumeRoleInputBuilder { role_arn: Some("arn:aws:iam::855326892052:role/LilacAccessRole"), role_session_name: Some("Lilac"), policy_arns: None, policy: None, duration_seconds: None, tags: None, transitive_tag_keys: None, external_id: Some("Lilac-b1538a2be7b949a2b59e81308e479b95"), serial_number: None, token_code: None, source_identity: None, provided_contexts: None }, config_override: None } } }, IdentityCachePartition(27)), cache_partition: IdentityCachePartition(27) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SystemTimeSource) }), sleep_impl: None, config_validators: [] }, runtime_plugins: [], behavior_version: Some(BehaviorVersion(V2025_01_17)) }, runtime_plugins: RuntimePlugins { client_plugins: [SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_http_client_plugin", auth_scheme_option_resolver: None, http_client: Some(Tracked { _origin: "default_http_client_plugin", value: SharedHttpClient { selector: HyperClient { connector_cache: RwLock { data: {}, poisoned: false, .. }, client_builder: Builder { client_config: Config { retry_canceled_requests: true, set_host: true, ver: Auto }, pool_config: Config { idle_timeout: Some(90s), max_idle_per_host: 18446744073709551615 } } } } }), endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_identity_cache_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "default_identity_cache_plugin", value: SharedIdentityCache(LazyCache { partitions: CachePartitions { partitions: RwLock { data: {}, poisoned: false, .. }, buffer_time: 10s }, load_timeout: 5s, buffer_time: 10s, buffer_time_jitter_fraction: 0x103d19638, default_expiration: 900s }) }), identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_retry_config", items: [TypeErasedBox[!Clone]:Set(RetryConfig { mode: Standard, max_attempts: 1, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[!Clone]:Set(RetryPartition { name: "s3-us-west-2" })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_retry_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "default_retry_config_plugin", value: SharedInterceptor { interceptor: TokenBucketProvider { default_partition: RetryPartition { name: "s3-us-west-2" }, token_bucket: TokenBucket { semaphore: Semaphore { ll_sem: Semaphore { permits: 500 } }, max_permits: 500, timeout_retry_cost: 10, retry_cost: 5 } } } }], retry_classifiers: [], retry_strategy: Some(Tracked { _origin: "default_retry_config_plugin", value: SharedRetryStrategy(StandardRetryStrategy { retry_permit: Mutex { data: None, poisoned: false, .. } }) }), time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_retry_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_sleep_impl_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: Some(Tracked { _origin: "default_sleep_impl_plugin", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_time_source_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "default_time_source_plugin", value: SharedTimeSource(SystemTimeSource) }), sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_timeout_config", items: [TypeErasedBox[!Clone]:Set(TimeoutConfig { connect_timeout: Disabled, read_timeout: Disabled, operation_timeout: Disabled, operation_attempt_timeout: Disabled })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_timeout_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_timeout_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_stalled_stream_protection_config", items: [TypeErasedBox[!Clone]:Set(StalledStreamProtectionConfig { upload_enabled: true, download_enabled: true, grace_period: 5s })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_stalled_stream_protection_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_stalled_stream_protection_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(ServiceRuntimePlugin { config: Some(FrozenLayer(Layer { name: "AmazonS3", items: [TypeErasedBox[!Clone]:Set(AuthSchemeAndEndpointOrchestrationV2)] })), runtime_components: RuntimeComponentsBuilder { builder_name: "ServiceRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: Some(Tracked { _origin: "ServiceRuntimePlugin", value: SharedEndpointResolver(DowncastParams(DefaultResolver { partition_resolver: PartitionResolver { partitions: [PartitionMetadata { id: "aws", region_regex: Regex("^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$"), regions: {"ap-southeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "sa-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "mx-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-4": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-7": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "af-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-5": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "il-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-east-1" } }, PartitionMetadata { id: "aws-cn", region_regex: Regex("^cn\\-\\w+\\-\\d+$"), regions: {"aws-cn-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "cn-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "cn-northwest-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-cn", dns_suffix: "amazonaws.com.cn", dual_stack_dns_suffix: "api.amazonwebservices.com.cn", supports_fips: true, supports_dual_stack: true, implicit_global_region: "cn-northwest-1" } }, PartitionMetadata { id: "aws-us-gov", region_regex: Regex("^us\\-gov\\-\\w+\\-\\d+$"), regions: {"us-gov-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-gov-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-us-gov-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-us-gov", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-gov-west-1" } }, PartitionMetadata { id: "aws-iso", region_regex: Regex("^us\\-iso\\-\\w+\\-\\d+$"), regions: {"us-iso-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-iso-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-iso-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso", dns_suffix: "c2s.ic.gov", dual_stack_dns_suffix: "c2s.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-iso-east-1" } }, PartitionMetadata { id: "aws-iso-b", region_regex: Regex("^us\\-isob\\-\\w+\\-\\d+$"), regions: {"aws-iso-b-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isob-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-b", dns_suffix: "sc2s.sgov.gov", dual_stack_dns_suffix: "sc2s.sgov.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isob-east-1" } }, PartitionMetadata { id: "aws-iso-e", region_regex: Regex("^eu\\-isoe\\-\\w+\\-\\d+$"), regions: {"aws-iso-e-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-isoe-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-e", dns_suffix: "cloud.adc-e.uk", dual_stack_dns_suffix: "cloud.adc-e.uk", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eu-isoe-west-1" } }, PartitionMetadata { id: "aws-iso-f", region_regex: Regex("^us\\-isof\\-\\w+\\-\\d+$"), regions: {"aws-iso-f-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-f", dns_suffix: "csp.hci.ic.gov", dual_stack_dns_suffix: "csp.hci.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isof-south-1" } }, PartitionMetadata { id: "aws-eusc", region_regex: Regex("^eusc\\-(de)\\-\\w+\\-\\d+$"), regions: {"eusc-de-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-eusc", dns_suffix: "amazonaws.eu", dual_stack_dns_suffix: "amazonaws.eu", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eusc-de-east-1" } }] } })) }), auth_schemes: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(SigV4AuthScheme { signer: SigV4Signer }) }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(SigV4aAuthScheme { signer: SigV4aSigner }) }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(S3ExpressAuthScheme { signer: SigV4Signer }) }], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ConnectionPoisoningInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RetryModeFeatureTrackerInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ServiceClockSkewInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RequestInfoInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: UserAgentInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: InvocationIdInterceptor { default: DefaultInvocationIdGenerator { rng: Mutex { data: Rng(17139163335112140661), poisoned: false, .. } } } } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RecursionDetectionInterceptor { env: Env(Real) } } }], retry_classifiers: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedRetryClassifier(HttpStatusCodeClassifier { retryable_status_codes: [500, 502, 503, 504] }) }], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] } }), SharedRuntimePlugin(EnforceContentLengthRuntimePlugin), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "aws_sdk_s3::config::Config", items: [TypeErasedBox[Clone]:Set(AppName("Lilac")), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "s3", version: "1.90.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("s3")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_sdk_s3::config::DisableS3ExpressSessionAuth"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_smithy_types::checksum_config::RequestChecksumCalculation"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_smithy_types::checksum_config::ResponseChecksumValidation"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(AssumeRoleProvider { inner: Inner { fluent_builder: AssumeRoleFluentBuilder { handle: Handle { conf: Config { config: FrozenLayer(Layer { name: "aws_sdk_sts::config::Config", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] }), cloneable: CloneableLayer(Layer { name: "", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] }), runtime_components: RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(NoCache) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(24)), cache_partition: IdentityCachePartition(24) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }, runtime_plugins: [], behavior_version: Some(BehaviorVersion(V2025_01_17)) }, runtime_plugins: RuntimePlugins { client_plugins: [SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_http_client_plugin", auth_scheme_option_resolver: None, http_client: Some(Tracked { _origin: "default_http_client_plugin", value: SharedHttpClient { selector: HyperClient { connector_cache: RwLock { data: {}, poisoned: false, .. }, client_builder: Builder { client_config: Config { retry_canceled_requests: true, set_host: true, ver: Auto }, pool_config: Config { idle_timeout: Some(90s), max_idle_per_host: 18446744073709551615 } } } } }), endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_identity_cache_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "default_identity_cache_plugin", value: SharedIdentityCache(LazyCache { partitions: CachePartitions { partitions: RwLock { data: {}, poisoned: false, .. }, buffer_time: 10s }, load_timeout: 5s, buffer_time: 10s, buffer_time_jitter_fraction: 0x103d19638, default_expiration: 900s }) }), identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_retry_config", items: [TypeErasedBox[!Clone]:Set(RetryConfig { mode: Standard, max_attempts: 1, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[!Clone]:Set(RetryPartition { name: "sts-us-west-2" })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_retry_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "default_retry_config_plugin", value: SharedInterceptor { interceptor: TokenBucketProvider { default_partition: RetryPartition { name: "sts-us-west-2" }, token_bucket: TokenBucket { semaphore: Semaphore { ll_sem: Semaphore { permits: 500 } }, max_permits: 500, timeout_retry_cost: 10, retry_cost: 5 } } } }], retry_classifiers: [], retry_strategy: Some(Tracked { _origin: "default_retry_config_plugin", value: SharedRetryStrategy(StandardRetryStrategy { retry_permit: Mutex { data: None, poisoned: false, .. } }) }), time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_retry_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_sleep_impl_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: Some(Tracked { _origin: "default_sleep_impl_plugin", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_time_source_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "default_time_source_plugin", value: SharedTimeSource(SystemTimeSource) }), sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_timeout_config", items: [TypeErasedBox[!Clone]:Set(TimeoutConfig { connect_timeout: Disabled, read_timeout: Disabled, operation_timeout: Disabled, operation_attempt_timeout: Disabled })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_timeout_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_timeout_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_stalled_stream_protection_config", items: [TypeErasedBox[!Clone]:Set(StalledStreamProtectionConfig { upload_enabled: true, download_enabled: true, grace_period: 5s })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_stalled_stream_protection_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_stalled_stream_protection_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(ServiceRuntimePlugin { config: Some(FrozenLayer(Layer { name: "AWSSecurityTokenServiceV20110615", items: [TypeErasedBox[!Clone]:Set(AuthSchemeAndEndpointOrchestrationV2)] })), runtime_components: RuntimeComponentsBuilder { builder_name: "ServiceRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: Some(Tracked { _origin: "ServiceRuntimePlugin", value: SharedEndpointResolver(DowncastParams(DefaultResolver { partition_resolver: PartitionResolver { partitions: [PartitionMetadata { id: "aws", region_regex: Regex("^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$"), regions: {"aws-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-5": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-4": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "mx-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "il-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "af-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-7": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "sa-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-east-1" } }, PartitionMetadata { id: "aws-cn", region_regex: Regex("^cn\\-\\w+\\-\\d+$"), regions: {"cn-northwest-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "cn-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-cn-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-cn", dns_suffix: "amazonaws.com.cn", dual_stack_dns_suffix: "api.amazonwebservices.com.cn", supports_fips: true, supports_dual_stack: true, implicit_global_region: "cn-northwest-1" } }, PartitionMetadata { id: "aws-us-gov", region_regex: Regex("^us\\-gov\\-\\w+\\-\\d+$"), regions: {"aws-us-gov-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-gov-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-gov-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-us-gov", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-gov-west-1" } }, PartitionMetadata { id: "aws-iso", region_regex: Regex("^us\\-iso\\-\\w+\\-\\d+$"), regions: {"aws-iso-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-iso-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-iso-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso", dns_suffix: "c2s.ic.gov", dual_stack_dns_suffix: "c2s.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-iso-east-1" } }, PartitionMetadata { id: "aws-iso-b", region_regex: Regex("^us\\-isob\\-\\w+\\-\\d+$"), regions: {"aws-iso-b-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isob-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-b", dns_suffix: "sc2s.sgov.gov", dual_stack_dns_suffix: "sc2s.sgov.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isob-east-1" } }, PartitionMetadata { id: "aws-iso-e", region_regex: Regex("^eu\\-isoe\\-\\w+\\-\\d+$"), regions: {"eu-isoe-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-iso-e-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-e", dns_suffix: "cloud.adc-e.uk", dual_stack_dns_suffix: "cloud.adc-e.uk", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eu-isoe-west-1" } }, PartitionMetadata { id: "aws-iso-f", region_regex: Regex("^us\\-isof\\-\\w+\\-\\d+$"), regions: {"aws-iso-f-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-f", dns_suffix: "csp.hci.ic.gov", dual_stack_dns_suffix: "csp.hci.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isof-south-1" } }, PartitionMetadata { id: "aws-eusc", region_regex: Regex("^eusc\\-(de)\\-\\w+\\-\\d+$"), regions: {"eusc-de-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-eusc", dns_suffix: "amazonaws.eu", dual_stack_dns_suffix: "amazonaws.eu", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eusc-de-east-1" } }] } })) }), auth_schemes: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(SigV4AuthScheme { signer: SigV4Signer }) }], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ConnectionPoisoningInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RetryModeFeatureTrackerInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ServiceClockSkewInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RequestInfoInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: UserAgentInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: InvocationIdInterceptor { default: DefaultInvocationIdGenerator { rng: Mutex { data: Rng(5967943325457935553), poisoned: false, .. } } } } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RecursionDetectionInterceptor { env: Env(Real) } } }], retry_classifiers: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedRetryClassifier(HttpStatusCodeClassifier { retryable_status_codes: [500, 502, 503, 504] }) }], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] } }), SharedRuntimePlugin(EnforceContentLengthRuntimePlugin), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "aws_sdk_sts::config::Config", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(NoCache) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(24)), cache_partition: IdentityCachePartition(24) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: None }), SharedRuntimePlugin(NoAuthRuntimePlugin(RuntimeComponentsBuilder { builder_name: "NoAuthRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [Tracked { _origin: "NoAuthRuntimePlugin", value: SharedAuthScheme(NoAuthScheme { signer: NoAuthSigner }) }], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "no_auth" }: Tracked { _origin: "NoAuthRuntimePlugin", value: SharedIdentityResolver { inner: NoAuthIdentityResolver, cache_partition: IdentityCachePartition(26) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] })), SharedRuntimePlugin(MetricsRuntimePlugin { scope: "aws-sdk-sts", time_source: SharedTimeSource(SharedTimeSource(SharedTimeSource(SystemTimeSource))), metadata: None })], operation_plugins: [] } }, inner: AssumeRoleInputBuilder { role_arn: Some("arn:aws:iam::855326892052:role/LilacAccessRole"), role_session_name: Some("Lilac"), policy_arns: None, policy: None, duration_seconds: None, tags: None, transitive_tag_keys: None, external_id: Some("Lilac-b1538a2be7b949a2b59e81308e479b95"), serial_number: None, token_code: None, source_identity: None, provided_contexts: None }, config_override: None } } }, IdentityCachePartition(27)), cache_partition: IdentityCachePartition(27) } }, AuthSchemeId { scheme_id: "sigv4a" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(AssumeRoleProvider { inner: Inner { fluent_builder: AssumeRoleFluentBuilder { handle: Handle { conf: Config { config: FrozenLayer(Layer { name: "aws_sdk_sts::config::Config", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] }), cloneable: CloneableLayer(Layer { name: "", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] }), runtime_components: RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(NoCache) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(24)), cache_partition: IdentityCachePartition(24) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }, runtime_plugins: [], behavior_version: Some(BehaviorVersion(V2025_01_17)) }, runtime_plugins: RuntimePlugins { client_plugins: [SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_http_client_plugin", auth_scheme_option_resolver: None, http_client: Some(Tracked { _origin: "default_http_client_plugin", value: SharedHttpClient { selector: HyperClient { connector_cache: RwLock { data: {}, poisoned: false, .. }, client_builder: Builder { client_config: Config { retry_canceled_requests: true, set_host: true, ver: Auto }, pool_config: Config { idle_timeout: Some(90s), max_idle_per_host: 18446744073709551615 } } } } }), endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_identity_cache_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "default_identity_cache_plugin", value: SharedIdentityCache(LazyCache { partitions: CachePartitions { partitions: RwLock { data: {}, poisoned: false, .. }, buffer_time: 10s }, load_timeout: 5s, buffer_time: 10s, buffer_time_jitter_fraction: 0x103d19638, default_expiration: 900s }) }), identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_retry_config", items: [TypeErasedBox[!Clone]:Set(RetryConfig { mode: Standard, max_attempts: 1, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[!Clone]:Set(RetryPartition { name: "sts-us-west-2" })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_retry_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "default_retry_config_plugin", value: SharedInterceptor { interceptor: TokenBucketProvider { default_partition: RetryPartition { name: "sts-us-west-2" }, token_bucket: TokenBucket { semaphore: Semaphore { ll_sem: Semaphore { permits: 500 } }, max_permits: 500, timeout_retry_cost: 10, retry_cost: 5 } } } }], retry_classifiers: [], retry_strategy: Some(Tracked { _origin: "default_retry_config_plugin", value: SharedRetryStrategy(StandardRetryStrategy { retry_permit: Mutex { data: None, poisoned: false, .. } }) }), time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_retry_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_sleep_impl_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: Some(Tracked { _origin: "default_sleep_impl_plugin", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_time_source_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "default_time_source_plugin", value: SharedTimeSource(SystemTimeSource) }), sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_timeout_config", items: [TypeErasedBox[!Clone]:Set(TimeoutConfig { connect_timeout: Disabled, read_timeout: Disabled, operation_timeout: Disabled, operation_attempt_timeout: Disabled })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_timeout_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_timeout_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_stalled_stream_protection_config", items: [TypeErasedBox[!Clone]:Set(StalledStreamProtectionConfig { upload_enabled: true, download_enabled: true, grace_period: 5s })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_stalled_stream_protection_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_stalled_stream_protection_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(ServiceRuntimePlugin { config: Some(FrozenLayer(Layer { name: "AWSSecurityTokenServiceV20110615", items: [TypeErasedBox[!Clone]:Set(AuthSchemeAndEndpointOrchestrationV2)] })), runtime_components: RuntimeComponentsBuilder { builder_name: "ServiceRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: Some(Tracked { _origin: "ServiceRuntimePlugin", value: SharedEndpointResolver(DowncastParams(DefaultResolver { partition_resolver: PartitionResolver { partitions: [PartitionMetadata { id: "aws", region_regex: Regex("^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$"), regions: {"aws-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-5": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-4": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "mx-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "il-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "af-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-7": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "sa-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-east-1" } }, PartitionMetadata { id: "aws-cn", region_regex: Regex("^cn\\-\\w+\\-\\d+$"), regions: {"cn-northwest-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "cn-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-cn-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-cn", dns_suffix: "amazonaws.com.cn", dual_stack_dns_suffix: "api.amazonwebservices.com.cn", supports_fips: true, supports_dual_stack: true, implicit_global_region: "cn-northwest-1" } }, PartitionMetadata { id: "aws-us-gov", region_regex: Regex("^us\\-gov\\-\\w+\\-\\d+$"), regions: {"aws-us-gov-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-gov-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-gov-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-us-gov", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-gov-west-1" } }, PartitionMetadata { id: "aws-iso", region_regex: Regex("^us\\-iso\\-\\w+\\-\\d+$"), regions: {"aws-iso-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-iso-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-iso-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso", dns_suffix: "c2s.ic.gov", dual_stack_dns_suffix: "c2s.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-iso-east-1" } }, PartitionMetadata { id: "aws-iso-b", region_regex: Regex("^us\\-isob\\-\\w+\\-\\d+$"), regions: {"aws-iso-b-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isob-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-b", dns_suffix: "sc2s.sgov.gov", dual_stack_dns_suffix: "sc2s.sgov.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isob-east-1" } }, PartitionMetadata { id: "aws-iso-e", region_regex: Regex("^eu\\-isoe\\-\\w+\\-\\d+$"), regions: {"eu-isoe-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-iso-e-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-e", dns_suffix: "cloud.adc-e.uk", dual_stack_dns_suffix: "cloud.adc-e.uk", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eu-isoe-west-1" } }, PartitionMetadata { id: "aws-iso-f", region_regex: Regex("^us\\-isof\\-\\w+\\-\\d+$"), regions: {"aws-iso-f-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-f", dns_suffix: "csp.hci.ic.gov", dual_stack_dns_suffix: "csp.hci.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isof-south-1" } }, PartitionMetadata { id: "aws-eusc", region_regex: Regex("^eusc\\-(de)\\-\\w+\\-\\d+$"), regions: {"eusc-de-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-eusc", dns_suffix: "amazonaws.eu", dual_stack_dns_suffix: "amazonaws.eu", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eusc-de-east-1" } }] } })) }), auth_schemes: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(SigV4AuthScheme { signer: SigV4Signer }) }], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ConnectionPoisoningInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RetryModeFeatureTrackerInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ServiceClockSkewInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RequestInfoInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: UserAgentInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: InvocationIdInterceptor { default: DefaultInvocationIdGenerator { rng: Mutex { data: Rng(5967943325457935553), poisoned: false, .. } } } } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RecursionDetectionInterceptor { env: Env(Real) } } }], retry_classifiers: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedRetryClassifier(HttpStatusCodeClassifier { retryable_status_codes: [500, 502, 503, 504] }) }], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] } }), SharedRuntimePlugin(EnforceContentLengthRuntimePlugin), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "aws_sdk_sts::config::Config", items: [TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::app_name::AppName"), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "sts", version: "1.72.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("sts")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips")] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(NoCache) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(24)), cache_partition: IdentityCachePartition(24) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: None }), SharedRuntimePlugin(NoAuthRuntimePlugin(RuntimeComponentsBuilder { builder_name: "NoAuthRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [Tracked { _origin: "NoAuthRuntimePlugin", value: SharedAuthScheme(NoAuthScheme { signer: NoAuthSigner }) }], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "no_auth" }: Tracked { _origin: "NoAuthRuntimePlugin", value: SharedIdentityResolver { inner: NoAuthIdentityResolver, cache_partition: IdentityCachePartition(26) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] })), SharedRuntimePlugin(MetricsRuntimePlugin { scope: "aws-sdk-sts", time_source: SharedTimeSource(SharedTimeSource(SharedTimeSource(SystemTimeSource))), metadata: None })], operation_plugins: [] } }, inner: AssumeRoleInputBuilder { role_arn: Some("arn:aws:iam::855326892052:role/LilacAccessRole"), role_session_name: Some("Lilac"), policy_arns: None, policy: None, duration_seconds: None, tags: None, transitive_tag_keys: None, external_id: Some("Lilac-b1538a2be7b949a2b59e81308e479b95"), serial_number: None, token_code: None, source_identity: None, provided_contexts: None }, config_override: None } } }, IdentityCachePartition(27)), cache_partition: IdentityCachePartition(27) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SystemTimeSource) }), sleep_impl: None, config_validators: [] }), order: None }), SharedRuntimePlugin(NoAuthRuntimePlugin(RuntimeComponentsBuilder { builder_name: "NoAuthRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [Tracked { _origin: "NoAuthRuntimePlugin", value: SharedAuthScheme(NoAuthScheme { signer: NoAuthSigner }) }], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "no_auth" }: Tracked { _origin: "NoAuthRuntimePlugin", value: SharedIdentityResolver { inner: NoAuthIdentityResolver, cache_partition: IdentityCachePartition(28) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] })), SharedRuntimePlugin(MetricsRuntimePlugin { scope: "aws-sdk-s3", time_source: SharedTimeSource(SharedTimeSource(SystemTimeSource)), metadata: None }), SharedRuntimePlugin(S3ExpressRuntimePlugin { config: FrozenLayer(Layer { name: "S3ExpressRuntimePlugin", items: [TypeErasedBox[!Clone]:Set(SessionTokenNameOverride)] }), runtime_components_builder: RuntimeComponentsBuilder { builder_name: "S3ExpressRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4-s3express" }: Tracked { _origin: "S3ExpressRuntimePlugin", value: SharedIdentityResolver { inner: DefaultS3ExpressIdentityProvider { behavior_version: BehaviorVersion(V2025_01_17), cache: S3ExpressIdentityCache { time_source: SharedTimeSource(SystemTimeSource), buffer_time: 10s }, with size/capacity: 0/100 }, cache_partition: IdentityCachePartition(29) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] } })], operation_plugins: [] } } }), [1ms3_prefix[0m: "", [1mstart_after_key[0m: None
    [2;3min[0m controlplane_api::routes::datasets::datasets::[1mlist_dataset_s3_folders[0m [2;3mwith[0m [1m_claims[0m: Claims { exp: 1749373669, iat: 1749352069, sub: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), jti: "ce5b486f-11b8-470d-a3b7-506e239750d9" }, [1mdb[0m: Database { pool: Pool { size: 3, num_idle: 3, is_closed: false, options: PoolOptions { max_connections: 5, min_connections: 0, connect_timeout: 30s, max_lifetime: Some(1800s), idle_timeout: Some(600s), test_before_acquire: true } } }, [1ms3[0m: S3Wrapper { bucket: "855326892052-test-data-project-assets", client: Client { handle: Handle { conf: Config { config: FrozenLayer(Layer { name: "aws_sdk_s3::config::Config", items: [TypeErasedBox[Clone]:Set(AppName("lilac")), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "s3", version: "1.90.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("s3")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_sdk_s3::config::DisableS3ExpressSessionAuth"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips"), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2"))] }), cloneable: CloneableLayer(Layer { name: "", items: [TypeErasedBox[Clone]:Set(AppName("lilac")), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "s3", version: "1.90.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("s3")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_sdk_s3::config::DisableS3ExpressSessionAuth"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips"), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2"))] }), runtime_components: RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(LazyCache { partitions: CachePartitions { partitions: RwLock { data: {}, poisoned: false, .. }, buffer_time: 10s }, load_timeout: 5s, buffer_time: 10s, buffer_time_jitter_fraction: 0x103d19638, default_expiration: 900s }) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4a" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(5)), cache_partition: IdentityCachePartition(5) } }, AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(5)), cache_partition: IdentityCachePartition(5) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }, runtime_plugins: [], behavior_version: Some(BehaviorVersion(V2025_01_17)) }, runtime_plugins: RuntimePlugins { client_plugins: [SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_http_client_plugin", auth_scheme_option_resolver: None, http_client: Some(Tracked { _origin: "default_http_client_plugin", value: SharedHttpClient { selector: HyperClient { connector_cache: RwLock { data: {}, poisoned: false, .. }, client_builder: Builder { client_config: Config { retry_canceled_requests: true, set_host: true, ver: Auto }, pool_config: Config { idle_timeout: Some(90s), max_idle_per_host: 18446744073709551615 } } } } }), endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_identity_cache_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "default_identity_cache_plugin", value: SharedIdentityCache(LazyCache { partitions: CachePartitions { partitions: RwLock { data: {}, poisoned: false, .. }, buffer_time: 10s }, load_timeout: 5s, buffer_time: 10s, buffer_time_jitter_fraction: 0x103d19638, default_expiration: 900s }) }), identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_retry_config", items: [TypeErasedBox[!Clone]:Set(RetryConfig { mode: Standard, max_attempts: 1, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[!Clone]:Set(RetryPartition { name: "s3-us-west-2" })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_retry_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "default_retry_config_plugin", value: SharedInterceptor { interceptor: TokenBucketProvider { default_partition: RetryPartition { name: "s3-us-west-2" }, token_bucket: TokenBucket { semaphore: Semaphore { ll_sem: Semaphore { permits: 500 } }, max_permits: 500, timeout_retry_cost: 10, retry_cost: 5 } } } }], retry_classifiers: [], retry_strategy: Some(Tracked { _origin: "default_retry_config_plugin", value: SharedRetryStrategy(StandardRetryStrategy { retry_permit: Mutex { data: None, poisoned: false, .. } }) }), time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_retry_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_sleep_impl_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: Some(Tracked { _origin: "default_sleep_impl_plugin", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: None, runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_time_source_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "default_time_source_plugin", value: SharedTimeSource(SystemTimeSource) }), sleep_impl: None, config_validators: [] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_timeout_config", items: [TypeErasedBox[!Clone]:Set(TimeoutConfig { connect_timeout: Disabled, read_timeout: Disabled, operation_timeout: Disabled, operation_attempt_timeout: Disabled })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_timeout_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_timeout_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "default_stalled_stream_protection_config", items: [TypeErasedBox[!Clone]:Set(StalledStreamProtectionConfig { upload_enabled: true, download_enabled: true, grace_period: 5s })] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "default_stalled_stream_protection_config_plugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: None, interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [Tracked { _origin: "default_stalled_stream_protection_config_plugin", value: SharedConfigValidator { inner: StaticFn } }] }), order: Some(Defaults) }), SharedRuntimePlugin(ServiceRuntimePlugin { config: Some(FrozenLayer(Layer { name: "AmazonS3", items: [TypeErasedBox[!Clone]:Set(AuthSchemeAndEndpointOrchestrationV2)] })), runtime_components: RuntimeComponentsBuilder { builder_name: "ServiceRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: Some(Tracked { _origin: "ServiceRuntimePlugin", value: SharedEndpointResolver(DowncastParams(DefaultResolver { partition_resolver: PartitionResolver { partitions: [PartitionMetadata { id: "aws", region_regex: Regex("^(us|eu|ap|sa|ca|me|af|il|mx)\\-\\w+\\-\\d+$"), regions: {"ap-southeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "sa-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "mx-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-4": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-7": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "af-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-west-2": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-5": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "il-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "me-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-west-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-southeast-3": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ca-central-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "ap-northeast-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-east-1" } }, PartitionMetadata { id: "aws-cn", region_regex: Regex("^cn\\-\\w+\\-\\d+$"), regions: {"aws-cn-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "cn-north-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "cn-northwest-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-cn", dns_suffix: "amazonaws.com.cn", dual_stack_dns_suffix: "api.amazonwebservices.com.cn", supports_fips: true, supports_dual_stack: true, implicit_global_region: "cn-northwest-1" } }, PartitionMetadata { id: "aws-us-gov", region_regex: Regex("^us\\-gov\\-\\w+\\-\\d+$"), regions: {"us-gov-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-gov-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-us-gov-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-us-gov", dns_suffix: "amazonaws.com", dual_stack_dns_suffix: "api.aws", supports_fips: true, supports_dual_stack: true, implicit_global_region: "us-gov-west-1" } }, PartitionMetadata { id: "aws-iso", region_regex: Regex("^us\\-iso\\-\\w+\\-\\d+$"), regions: {"us-iso-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-iso-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "aws-iso-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso", dns_suffix: "c2s.ic.gov", dual_stack_dns_suffix: "c2s.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-iso-east-1" } }, PartitionMetadata { id: "aws-iso-b", region_regex: Regex("^us\\-isob\\-\\w+\\-\\d+$"), regions: {"aws-iso-b-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isob-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-b", dns_suffix: "sc2s.sgov.gov", dual_stack_dns_suffix: "sc2s.sgov.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isob-east-1" } }, PartitionMetadata { id: "aws-iso-e", region_regex: Regex("^eu\\-isoe\\-\\w+\\-\\d+$"), regions: {"aws-iso-e-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "eu-isoe-west-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-e", dns_suffix: "cloud.adc-e.uk", dual_stack_dns_suffix: "cloud.adc-e.uk", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eu-isoe-west-1" } }, PartitionMetadata { id: "aws-iso-f", region_regex: Regex("^us\\-isof\\-\\w+\\-\\d+$"), regions: {"aws-iso-f-global": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-south-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }, "us-isof-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-iso-f", dns_suffix: "csp.hci.ic.gov", dual_stack_dns_suffix: "csp.hci.ic.gov", supports_fips: true, supports_dual_stack: false, implicit_global_region: "us-isof-south-1" } }, PartitionMetadata { id: "aws-eusc", region_regex: Regex("^eusc\\-(de)\\-\\w+\\-\\d+$"), regions: {"eusc-de-east-1": PartitionOutputOverride { name: None, dns_suffix: None, dual_stack_dns_suffix: None, supports_fips: None, supports_dual_stack: None, implicit_global_region: None }}, outputs: PartitionOutput { name: "aws-eusc", dns_suffix: "amazonaws.eu", dual_stack_dns_suffix: "amazonaws.eu", supports_fips: true, supports_dual_stack: false, implicit_global_region: "eusc-de-east-1" } }] } })) }), auth_schemes: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(SigV4AuthScheme { signer: SigV4Signer }) }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(SigV4aAuthScheme { signer: SigV4aSigner }) }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedAuthScheme(S3ExpressAuthScheme { signer: SigV4Signer }) }], identity_cache: None, identity_resolvers: None, interceptors: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ConnectionPoisoningInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RetryModeFeatureTrackerInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: ServiceClockSkewInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RequestInfoInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: UserAgentInterceptor } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: InvocationIdInterceptor { default: DefaultInvocationIdGenerator { rng: Mutex { data: Rng(3717967720444552898), poisoned: false, .. } } } } }, Tracked { _origin: "ServiceRuntimePlugin", value: SharedInterceptor { interceptor: RecursionDetectionInterceptor { env: Env(Real) } } }], retry_classifiers: [Tracked { _origin: "ServiceRuntimePlugin", value: SharedRetryClassifier(HttpStatusCodeClassifier { retryable_status_codes: [500, 502, 503, 504] }) }], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] } }), SharedRuntimePlugin(EnforceContentLengthRuntimePlugin), SharedRuntimePlugin(StaticRuntimePlugin { config: Some(FrozenLayer(Layer { name: "aws_sdk_s3::config::Config", items: [TypeErasedBox[Clone]:Set(AppName("lilac")), TypeErasedBox[Clone]:Set(ApiMetadata { service_id: "s3", version: "1.90.0" }), TypeErasedBox[Clone]:Set(Region("us-west-2")), TypeErasedBox[Clone]:Set(SigningName("s3")), TypeErasedBox[Clone]:ExplicitlyUnset("aws_sdk_s3::config::DisableS3ExpressSessionAuth"), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::EndpointUrl"), TypeErasedBox[Clone]:Set(RetryConfig { mode: Standard, max_attempts: 3, initial_backoff: 1s, max_backoff: 20s, reconnect_mode: ReconnectOnTransientError, use_static_exponential_base: false }), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:Set(WhenSupported), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseDualStack"), TypeErasedBox[Clone]:Set(TimeoutConfig { connect_timeout: Set(3.1s), read_timeout: Unset, operation_timeout: Unset, operation_attempt_timeout: Unset }), TypeErasedBox[Clone]:ExplicitlyUnset("aws_types::endpoint_config::UseFips"), TypeErasedBox[Clone]:Set(SigningRegion("us-west-2"))] })), runtime_components: Some(RuntimeComponentsBuilder { builder_name: "service config", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: Some(Tracked { _origin: "service config", value: SharedIdentityCache(LazyCache { partitions: CachePartitions { partitions: RwLock { data: {}, poisoned: false, .. }, buffer_time: 10s }, load_timeout: 5s, buffer_time: 10s, buffer_time_jitter_fraction: 0x103d19638, default_expiration: 900s }) }), identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4a" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(5)), cache_partition: IdentityCachePartition(5) } }, AuthSchemeId { scheme_id: "sigv4" }: Tracked { _origin: "service config", value: SharedIdentityResolver { inner: SharedCredentialsProvider(DefaultCredentialsChain { provider_chain: CredentialsProviderChain { providers: ["Environment", "Profile", "WebIdentityToken", "EcsContainer", "Ec2InstanceMetadata"] } }, IdentityCachePartition(5)), cache_partition: IdentityCachePartition(5) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: Some(Tracked { _origin: "service config", value: SharedTimeSource(SharedTimeSource(SystemTimeSource)) }), sleep_impl: Some(Tracked { _origin: "service config", value: SharedAsyncSleep(TokioSleep) }), config_validators: [] }), order: None }), SharedRuntimePlugin(NoAuthRuntimePlugin(RuntimeComponentsBuilder { builder_name: "NoAuthRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [Tracked { _origin: "NoAuthRuntimePlugin", value: SharedAuthScheme(NoAuthScheme { signer: NoAuthSigner }) }], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "no_auth" }: Tracked { _origin: "NoAuthRuntimePlugin", value: SharedIdentityResolver { inner: NoAuthIdentityResolver, cache_partition: IdentityCachePartition(7) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] })), SharedRuntimePlugin(MetricsRuntimePlugin { scope: "aws-sdk-s3", time_source: SharedTimeSource(SharedTimeSource(SharedTimeSource(SystemTimeSource))), metadata: None }), SharedRuntimePlugin(S3ExpressRuntimePlugin { config: FrozenLayer(Layer { name: "S3ExpressRuntimePlugin", items: [TypeErasedBox[!Clone]:Set(SessionTokenNameOverride)] }), runtime_components_builder: RuntimeComponentsBuilder { builder_name: "S3ExpressRuntimePlugin", auth_scheme_option_resolver: None, http_client: None, endpoint_resolver: None, auth_schemes: [], identity_cache: None, identity_resolvers: Some({AuthSchemeId { scheme_id: "sigv4-s3express" }: Tracked { _origin: "S3ExpressRuntimePlugin", value: SharedIdentityResolver { inner: DefaultS3ExpressIdentityProvider { behavior_version: BehaviorVersion(V2025_01_17), cache: S3ExpressIdentityCache { time_source: SharedTimeSource(SharedTimeSource(SystemTimeSource)), buffer_time: 10s }, with size/capacity: 0/100 }, cache_partition: IdentityCachePartition(8) } }}), interceptors: [], retry_classifiers: [], retry_strategy: None, time_source: None, sleep_impl: None, config_validators: [] } })], operation_plugins: [] } } } }, [1mrequest[0m: ListS3ObjectsRequest { prefix: "", start_after_key: None }, [1mdataset_id[0m: "2f6992ce-fe32-45c6-8e28-07ceb3de3aef", [1muser_id[0m: "f7700fbe-498e-4e2a-a5fb-e3952a981879"
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: 9a0be8ed-e470-4a60-b9a5-56dc01cea70f

[Running 'cargo run']
  [2m2025-06-08T03:26:52.216498Z[0m [32m INFO[0m [1;32mcontrolplane_api[0m[32m: [32mdatabase url: postgres://postgres:12345@localhost/database[0m
    [2;3mat[0m controlplane-api/src/main.rs:30

  [2m2025-06-08T03:26:52.292823Z[0m [32m INFO[0m [1;32msqlx::postgres::notice[0m[32m: [32mrelation "_sqlx_migrations" already exists, skipping[0m
    [2;3mat[0m /Users/ryan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-postgres-0.8.6/src/connection/stream.rs:185

  [2m2025-06-08T03:26:52.493054Z[0m [32m INFO[0m [1;32mcontrolplane_api[0m[32m: [32mlistening on 0.0.0.0:3000[0m
    [2;3mat[0m controlplane-api/src/main.rs:66

[Running 'cargo run']
  [2m2025-06-08T03:27:04.987506Z[0m [32m INFO[0m [1;32mcontrolplane_api[0m[32m: [32mdatabase url: postgres://postgres:12345@localhost/database[0m
    [2;3mat[0m controlplane-api/src/main.rs:30

  [2m2025-06-08T03:27:05.067999Z[0m [32m INFO[0m [1;32msqlx::postgres::notice[0m[32m: [32mrelation "_sqlx_migrations" already exists, skipping[0m
    [2;3mat[0m /Users/ryan/.cargo/registry/src/index.crates.io-6f17d22bba15001f/sqlx-postgres-0.8.6/src/connection/stream.rs:185

  [2m2025-06-08T03:27:05.310936Z[0m [32m INFO[0m [1;32mcontrolplane_api[0m[32m: [32mlistening on 0.0.0.0:3000[0m
    [2;3mat[0m controlplane-api/src/main.rs:66

  [2m2025-06-08T03:27:07.531698Z[0m [32m INFO[0m [1;32mcontrolplane_api::routes::user::user[0m[32m: [1;32mreturn[0m[32m: Json(GetUserResponse { id: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), email: "ewingryan98@gmail.com" })[0m
    [2;3mat[0m controlplane-api/src/routes/user/user.rs:44
    [2;3min[0m controlplane_api::routes::user::user::[1mget_current_user[0m [2;3mwith[0m [1mclaims[0m: Claims { exp: 1749373669, iat: 1749352069, sub: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), jti: "ce5b486f-11b8-470d-a3b7-506e239750d9" }
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: 310ca897-063b-410d-ba46-09760b37172e

  [2m2025-06-08T03:27:07.560228Z[0m [32m INFO[0m [1;32mcontrolplane_api::routes::user::user[0m[32m: [1;32mreturn[0m[32m: Json(GetUserResponse { id: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), email: "ewingryan98@gmail.com" })[0m
    [2;3mat[0m controlplane-api/src/routes/user/user.rs:44
    [2;3min[0m controlplane_api::routes::user::user::[1mget_current_user[0m [2;3mwith[0m [1mclaims[0m: Claims { exp: 1749373669, iat: 1749352069, sub: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), jti: "ce5b486f-11b8-470d-a3b7-506e239750d9" }
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: 0d3294a8-d6e8-4501-9daf-d80c9ff4f8a1

  [2m2025-06-08T03:27:07.623085Z[0m [32m INFO[0m [1;32mcontrolplane_api::routes::organization::organization[0m[32m: [1;32mreturn[0m[32m: Json(ListOrganizationsResponse { organizations: [GetOrganizationResponse { id: OrganizationId(fba78657-e32c-4f2d-afa6-cc28defed948), name: "test org" }] })[0m
    [2;3mat[0m controlplane-api/src/routes/organization/organization.rs:70
    [2;3min[0m controlplane_api::routes::organization::organization::[1mlist_organizations[0m [2;3mwith[0m [1mclaims[0m: Claims { exp: 1749373669, iat: 1749352069, sub: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), jti: "ce5b486f-11b8-470d-a3b7-506e239750d9" }
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: 930c6727-2a07-436d-891d-b22914869b1e

  [2m2025-06-08T03:27:07.630086Z[0m [32m INFO[0m [1;32mcontrolplane_api::routes::projects::projects[0m[32m: [1;32mreturn[0m[32m: Json(GetProjectResponse { id: ProjectId(87843f12-1c28-4f8c-a294-ba738c159264), name: "project1", organization_id: OrganizationId(fba78657-e32c-4f2d-afa6-cc28defed948), aws_integration: Some(AWSIntegration { role_arn: "arn:aws:iam::855326892052:role/LilacAccessRole", external_id: "Lilac-b1538a2be7b949a2b59e81308e479b95" }) })[0m
    [2;3mat[0m controlplane-api/src/routes/projects/projects.rs:47
    [2;3min[0m controlplane_api::routes::projects::projects::[1mget_project[0m [2;3mwith[0m [1mclaims[0m: Claims { exp: 1749373669, iat: 1749352069, sub: UserId(f7700fbe-498e-4e2a-a5fb-e3952a981879), jti: "ce5b486f-11b8-470d-a3b7-506e239750d9" }, [1mproject_id[0m: "87843f12-1c28-4f8c-a294-ba738c159264"
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: b5e698e6-d5d1-423b-bb2c-499c3a6e32e0

  [2m2025-06-08T03:27:07.876895Z[0m [32m INFO[0m [1;32mcontrolplane_api::routes::datasets::datasets[0m[32m: [1;32mreturn[0m[32m: Json(GetDatasetResponse { id: DatasetId(2f6992ce-fe32-45c6-8e28-07ceb3de3aef), name: "my-bucket", description: Some(""), project_id: ProjectId(87843f12-1c28-4f8c-a294-ba738c159264), dataset_source: S3 { bucket_name: "855326892052-test-data-project-assets", region: "us-west-2" } })[0m
    [2;3mat[0m controlplane-api/src/routes/datasets/datasets.rs:100
    [2;3min[0m controlplane_api::routes::datasets::datasets::[1mget_dataset[0m [2;3mwith[0m [1mdataset_id[0m: DatasetId(2f6992ce-fe32-45c6-8e28-07ceb3de3aef)
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: 92ca7853-8a0a-4e3b-8fec-d2e681272271

  [2m2025-06-08T03:27:08.143027Z[0m [32m INFO[0m [1;32mcommon::aws::s3[0m[32m: [32mListObjectsV2Output { is_truncated: Some(false), contents: None, name: Some("855326892052-test-data-project-assets"), prefix: Some(""), delimiter: Some("/"), max_keys: Some(1000), common_prefixes: Some([CommonPrefix { prefix: Some("customer_assets/") }]), encoding_type: None, key_count: Some(1), continuation_token: None, next_continuation_token: None, start_after: None, request_charged: None, _extended_request_id: Some("X5niNVmnGPPhE9f0acHrqw3v6DzRHD7oYeWUHmN6rybzWkW4W/Jk1IZaT1s8BIAWLoL7AVQLMcc="), _request_id: Some("NP2HDDV5X0NF1160") }[0m
    [2;3mat[0m common/src/aws/s3.rs:145
    [2;3min[0m common::aws::s3::[1mlist_dataset_prefixes[0m
    [2;3min[0m controlplane_api::routes::datasets::datasets::[1mlist_dataset_s3_folders[0m [2;3mwith[0m [1mdataset_id[0m: "2f6992ce-fe32-45c6-8e28-07ceb3de3aef", [1muser_id[0m: "f7700fbe-498e-4e2a-a5fb-e3952a981879"
    [2;3min[0m controlplane_api::[1mhttp-request[0m [2;3mwith[0m [1mrequest_id[0m: b2b37484-a08b-4fbd-a2a6-169a99ba5963

